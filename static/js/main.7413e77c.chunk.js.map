{"version":3,"sources":["TypeParapraph.tsx","TypeField.tsx","Statistics.tsx","Typer.tsx","StatisticsTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["commonPosition","text","value","commonUntilIndex","i","length","useStyles","makeStyles","palette","spacing","createStyles","root","whiteSpace","paddingLeft","marginBottom","done","color","primary","typed","error","main","textDecoration","left","borderLeft","marginLeft","grey","next","TypeParagraph","cursorRef","classes","position","Typography","className","slice","replaceAll","ref","memo","TypeField","inputRef","rest","_inputRef","useRef","useEffect","current","focus","TextField","label","variant","autoFocus","onSelect","setSelectionRange","scrollLeft","Statistics","start","end","strokes","hits","misses","words","accuracy","hitsPerMinute","wordsPerMinute","_lastCharacter","this","character","isHit","Date","getTime","timeInMinutes","Math","max","width","height","display","flexDirection","stats","flexGrow","overflowY","input","Typer","getParagraph","onParagraphCompleted","useState","Array","from","paragraphs","setParagraphs","setValue","textEl","leftEl","currentText","useLayoutEffect","scrollTop","offsetTop","clientHeight","Box","justifyContent","toFixed","TypeParapraph","map","paragraph","index","onChange","event","target","trim","nextParagraphs","onKeyPress","String","fromCharCode","charCode","expected","addStroke","fullWidth","up","success","down","Value","getValue","formatValue","last","undefined","StatisticsTable","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","row","maxWidth","marginRight","paddingTop","title","typer","App","setStats","statsString","window","localStorage","getItem","JSON","parse","quotes","floor","random","quote","newStats","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7413e77c.chunk.js","sourcesContent":["import React, { Ref, memo } from 'react';\nimport { createStyles, makeStyles, Theme, Typography } from '@material-ui/core';\n\nexport const commonPosition = (text: string, value: string) => {\n  let commonUntilIndex = 0\n  for (let i = 1; i <= text.length; i++) {\n    if (value[i - 1] === text[i - 1]) {\n      commonUntilIndex = i\n    } else {\n      break\n    }\n  }\n  return commonUntilIndex\n}\n\nconst styles = ({palette, spacing}: Theme) => createStyles({\n  root: {\n    whiteSpace: 'pre-wrap',\n    paddingLeft: 1,\n    marginBottom: spacing(1)\n  },\n  done: {\n    color: palette.text.primary\n  },\n  typed: {\n    color: palette.error.main,\n    textDecoration: 'underline'\n  },\n  left: {\n    borderLeft: '1px solid black',\n    marginLeft: -1,\n    color: palette.grey[600]\n  },\n  next: {\n    color: palette.grey[600]\n  }\n});\n\nconst useStyles = makeStyles(styles);\n\ninterface Props {\n  /** The main text that users ought to type. */\n  text: string\n  /** The text that the user already typed. */\n  typed?: string\n  /** The reference for the element that displays the cursor on its left side. */\n  cursorRef?: Ref<HTMLSpanElement>\n};\n\nconst TypeParagraph: React.FC<Props> = ({ text, typed, cursorRef }) => {\n  const classes = useStyles();\n\n  if (typed || typed === '') {\n    const position = commonPosition(text, typed);\n    return <Typography className={classes.root}>\n      <span className={classes.done}>\n        {text.slice(0, position)}\n      </span>\n      <span className={classes.typed}>\n        {typed.slice(position).replaceAll(' ', 'Â·')}\n      </span>\n      <span className={classes.left} ref={cursorRef}>\n        {text.slice(position).replaceAll(' ', 'Â·\\u200B')}\n      </span>\n    </Typography>\n  } else {\n    return <Typography className={classes.root}>\n      <span className={classes.next}>\n        {text.replaceAll(' ', 'Â·\\u200B')}\n      </span>\n    </Typography>\n  }\n};\n\nexport default memo(TypeParagraph);\n","import React, { useRef, useEffect, MutableRefObject } from 'react';\nimport { TextField } from '@material-ui/core';\n\ninterface Props {\n  value: string,\n  inputRef?: MutableRefObject<HTMLInputElement | undefined>,\n  [x:string]: any;\n};\n\nconst TypeField: React.FC<Props> = ({ value, inputRef, ...rest }) => {\n  const _inputRef = useRef<HTMLInputElement>()\n  inputRef = inputRef || _inputRef\n\n  const handleSelect = () => {\n    if (inputRef?.current) {\n      inputRef.current.focus();\n      inputRef.current.setSelectionRange(value.length, value.length);\n      inputRef.current.scrollLeft = 9999999;\n    }\n  }\n\n  // Automatically focus the input element.\n  useEffect(() => {\n    if (inputRef?.current) {\n      inputRef.current.focus()\n    }\n  }, [value, inputRef])\n\n  return (\n    <TextField\n      label={value ? null : 'start typing when ready ...'}\n      variant=\"outlined\"\n      autoFocus\n      inputRef={inputRef}\n      value={value}\n      onSelect={handleSelect}\n      {...rest}\n    />\n  )\n};\n\nexport default TypeField;\n","export default class Statistics {\n  start?: number;\n  end = -1;\n\n  strokes = 0;\n  hits = 0;\n  misses = 0;\n  words = 0;\n\n  accuracy = 1;\n  hitsPerMinute = 0;\n  wordsPerMinute = 0;\n\n  _lastCharacter = ''\n\n  constructor(start?: number) {\n    this.start = start\n  }\n\n  addStroke(character: string, isHit: boolean) {\n    if (!this.start) {\n      this.start = new Date().getTime() - 100;\n    }\n    this.end = new Date().getTime();\n\n    const timeInMinutes = Math.max(0, (this.end - this.start)) / (60 * 1000)\n\n    this.strokes++;\n    if (character.length > 0) {\n      if (isHit) {\n        this.hits++;\n        if (timeInMinutes > 0) {\n          this.hitsPerMinute = this.hits / timeInMinutes;\n        }\n        if ((character === ' ' && this._lastCharacter !== '.') || character === '.') {\n          this.words++;\n          this.wordsPerMinute = this.words / timeInMinutes;\n        }\n      } else {\n        this.misses++;\n      }\n    }\n\n    if (this.strokes > 0) {\n      this.accuracy = this.hits / this.strokes;\n    }\n    this._lastCharacter = character;\n  }\n}","import React, { KeyboardEvent, useState, useRef, useLayoutEffect } from 'react';\nimport { Box, createStyles, makeStyles, Theme, Typography } from '@material-ui/core';\nimport TypeParapraph, { commonPosition } from './TypeParapraph';\nimport TypeField from './TypeField';\nimport Statistics from './Statistics';\n\nconst styles = ({spacing}: Theme) => createStyles({\n  root: {\n    width: '100%',\n    height: 300,\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  stats: {\n    marginBottom: spacing(2),\n  },\n  text: {\n    flexGrow: 1,\n    overflowY: 'scroll',\n    marginBottom: spacing(3)\n  },\n  input: {\n    width: '100%'\n  }\n});\n\nconst useStyles = makeStyles(styles);\n\nexport interface ParagraphCompleted {\n  stats: Statistics\n  text: string\n}\n\ninterface Props {\n   getParagraph: () => string;\n   onParagraphCompleted?: (event: ParagraphCompleted) => void;\n}\n\nconst nextParagraphs = (paragraphs: Array<string>, getParagraph: () => string) => [\n  ...paragraphs.slice(1),\n  getParagraph()\n]\n\nconst Typer: React.FC<Props> = ({ getParagraph, onParagraphCompleted }) => {\n  const classes = useStyles();\n  const [paragraphs, setParagraphs] = useState<Array<string>>(Array.from({length: 10}, getParagraph));\n  const [value, setValue] = useState<string>('');\n  const textEl = useRef<HTMLDivElement>(null);\n  const leftEl = useRef<HTMLSpanElement>(null);\n\n  const stats = useRef<Statistics>(new Statistics());\n\n  const currentText = paragraphs[0]\n  const position = commonPosition(currentText, value)\n\n  const handleChange = (event: React.ChangeEvent<{value: string}>) => {\n    const value = event.target.value;\n    if (value.trim() === currentText.trim()) {\n      setParagraphs(nextParagraphs(paragraphs, getParagraph))\n      setValue('')\n      if (onParagraphCompleted) {\n        onParagraphCompleted({\n          stats: stats.current,\n          text: currentText\n        })\n      }\n      stats.current = new Statistics(stats.current.end)\n    } else {\n      setValue(value)\n    }\n  }\n\n  const handleKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\n    const typed = String.fromCharCode(event.charCode)\n    const expected = currentText.slice(position, position + 1)\n    stats.current.addStroke(typed, typed === expected);\n  }\n\n  // Auto scroll the text (in case it is not fully displayed anyways)\n  useLayoutEffect(() => {\n    if (textEl?.current && leftEl?.current) {\n      textEl.current.scrollTop =\n        + leftEl.current.offsetTop\n        - textEl.current.offsetTop\n        - (textEl.current.clientHeight * 0.3)\n    }\n  }, [textEl, leftEl])\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.stats}>\n        <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\n          <Typography>{(stats.current.accuracy * 100).toFixed(1)} accuracy</Typography>\n          <Typography>{stats.current.wordsPerMinute.toFixed(1)} words/minute</Typography>\n          <Typography>{stats.current.hitsPerMinute.toFixed(1)} hits/minute</Typography>\n        </Box>\n      </div>\n      <div className={classes.text} ref={textEl}>\n        <TypeParapraph text={currentText} typed={value} cursorRef={leftEl} />\n        {paragraphs.slice(1).map((paragraph, index) => <TypeParapraph key={index} text={paragraph} />)}\n      </div>\n      <div className={classes.input}>\n        <TypeField\n          value={value}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          fullWidth\n        />\n      </div>\n    </div>\n  )\n};\n\nexport default Typer;\n","import React from 'react';\nimport { createStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Theme } from '@material-ui/core';\nimport Statistics from \"./Statistics\";\n\nconst styles = ({palette}: Theme) => createStyles({\n  up: {\n    color: palette.success.main\n  },\n  down: {\n    color: palette.error.main\n  }\n});\n\nconst useStyles = makeStyles(styles);\n\ninterface ValueProps {\n  getValue: (stats: Statistics) => number\n  formatValue: (value: number) => string\n  current: Statistics\n  last?: Statistics\n}\n\nconst Value: React.FC<ValueProps> = ({getValue, formatValue, current, last}) => {\n  const classes = useStyles()\n  const value = getValue(current)\n  let className: string | undefined = undefined\n  if (last)\n    if (getValue(last) - value <= 0) {\n      className = classes.up\n    } else {\n      className = classes.down\n    }\n  return <span className={className}>\n    {formatValue(value)}\n  </span>\n};\n\ninterface Props {\n  stats: Array<Statistics>\n}\n\nconst StatisticsTable: React.FC<Props> = ({stats}) => {\n  return <TableContainer>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>characters</TableCell>\n          <TableCell align=\"right\">accuracy</TableCell>\n          <TableCell align=\"right\">hits/minute</TableCell>\n          <TableCell align=\"right\">words/minute</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {stats.slice(0, 10).map((row, index) => (\n          <TableRow key={index}>\n            <TableCell>{row.hits.toFixed(0)}</TableCell>\n            <TableCell align=\"right\">\n              <Value\n                getValue={(stats) => stats.accuracy}\n                formatValue={(value) => (value * 100).toFixed(1) + '%'}\n                current={row} last={stats[index + 1]}\n              />\n            </TableCell>\n            <TableCell align=\"right\">\n              <Value\n                getValue={(stats) => stats.hitsPerMinute}\n                formatValue={(value) => value.toFixed(1)}\n                current={row} last={stats[index + 1]}\n              />\n            </TableCell>\n            <TableCell align=\"right\">\n              <Value\n                getValue={(stats) => stats.wordsPerMinute}\n                formatValue={(value) => value.toFixed(1)}\n                current={row} last={stats[index + 1]}\n              />\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>\n};\n\nexport default StatisticsTable;","import React, { useEffect, useState } from 'react';\nimport { createStyles, makeStyles, Theme, Typography } from '@material-ui/core';\nimport quotes from './quotes.json';\nimport Typer, { ParagraphCompleted } from './Typer';\nimport Statistics from './Statistics';\nimport StatisticsTable from './StatisticsTable';\n\ninterface Quote {\n  author: string\n  quote: string\n}\n\nconst styles = ({spacing}: Theme) => createStyles({\n  root: {\n    maxWidth: 512,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    paddingTop: spacing(6)\n  },\n  title: {\n    marginBottom: spacing(6)\n  },\n  typer: {\n    marginBottom: spacing(4)\n  }\n});\n\nconst useStyles = makeStyles(styles);\n\nconst getQuote: () => Quote = () => quotes[Math.floor(Math.random() * quotes.length)];\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  const [stats, setStats] = useState<Array<Statistics>>([]);\n\n  useEffect(() => {\n    const statsString = window.localStorage.getItem('stats');\n    if (statsString) {\n      setStats(JSON.parse(statsString));\n    }\n  }, [setStats])\n\n  const handleParagraphCompleted = (event: ParagraphCompleted) => {\n    const newStats = [event.stats, ...stats].slice(0, 10);\n    setStats(newStats);\n    window.localStorage.setItem('stats', JSON.stringify(newStats));\n  }\n\n  return <div className={classes.root}>\n    <div className={classes.typer}>\n      <Typography className={classes.title} variant=\"h2\">\n        <b>Typer</b> typing trainer\n      </Typography>\n      <Typer\n        getParagraph={() => getQuote().quote}\n        onParagraphCompleted={handleParagraphCompleted}\n      />\n    </div>\n    {stats.length > 0 && <StatisticsTable stats={stats} />}\n  </div>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}